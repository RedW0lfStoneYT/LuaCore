plugins {
    id 'java'
//    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.gradleup.shadow' version '8.3.0'
    id 'maven-publish'
    id("io.papermc.paperweight.userdev") version "1.7.1" apply false
}

group 'dev.selena.lua'
version '1.2.0-Dev14-SNAPSHOT'
apply plugin: 'java'
apply plugin: 'com.gradleup.shadow'
defaultTasks('build')

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = uri("https://repo.codemc.io/repository/maven-public/")
    }

    maven {
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
    maven {
        name = "iridiumdevelopment"
        url = uri("https://nexus.iridiumdevelopment.net/repository/maven-releases/")
    }
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
}

// Ty oraxen dev team lol
class NMSVersion {
    String nmsVersion
    String serverVersion
    int javaVersion

    NMSVersion(String nms, String server, int javaVersion) {
        this.nmsVersion = nms
        this.serverVersion = server
        this.javaVersion = javaVersion
    }
}

static NMSVersion toNms(String nms, String server, int javaVersion) {
    return new NMSVersion(nms, server, javaVersion)
}

List<NMSVersion> SUPPORTED_VERSIONS = [
toNms("NMS_1_20_R2", "1.20.2-R0.1-SNAPSHOT", 21),
toNms("NMS_1_20_R3", "1.20.4-R0.1-SNAPSHOT", 21),
toNms("NMS_1_20_6", "1.20.6-R0.1-SNAPSHOT", 21)
]

SUPPORTED_VERSIONS.each { it ->
    def server = it.serverVersion
    def javaV = it.javaVersion
    project(":Compatibility:${it.nmsVersion}") {

        apply plugin: "java"
        apply plugin: "io.papermc.paperweight.userdev"
        apply plugin: 'com.gradleup.shadow'
        repositories {
            mavenLocal()
            maven {
                url = "https://papermc.io/repo/repository/maven-public/"
            } // Paper
            maven {
                url = "https://repo.mineinabyss.com/releases"
            }
        }
        dependencies {
            //
//            compileOnly "org.spigotmc:spigot:${server}:remapped-mojang"
            paperweight.paperDevBundle(server)
            compileOnly "io.papermc.paper:paper-api:${server}"
            implementation(project(path: ":Compatibility", configuration: 'shadow'))
        }
        java {
            toolchain.languageVersion.set(JavaLanguageVersion.of(javaV))
        }




    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "com.gradleup.shadow"
    repositories {
        maven {
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
    }
    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'
    }
}

dependencies {
    // Tests
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.20:3.24.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
//    implementation 'org.slf4j:slf4j-simple:2.0.5'
    testImplementation('org.mockito:mockito-inline:5.2.0')
    testImplementation('org.mockito:mockito-junit-jupiter:5.2.0')
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'commons-lang:commons-lang:2.6'
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly('org.jetbrains:annotations:24.0.1')
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    compileOnly 'org.apache.commons:commons-lang3:3.13.0'
    compileOnly 'io.github.classgraph:classgraph:4.8.162'
    // TODO make this functional
    compileOnly "dev.jorel:commandapi-bukkit-core:9.3.0"
    // Shadowed dependencies
    implementation("de.tr7zw:item-nbt-api:2.13.2")
    implementation('com.iridium:IridiumColorAPI:1.0.9')
    implementation 'org.luaj:luaj-jse:3.0.1'
    implementation('com.google.code.gson:gson:2.10.1')
    implementation("com.google.guava:guava:31.1-jre")
    compileOnly(project(path: ":Compatibility", configuration: 'shadow'))
//    compileOnly(project(path: ":Compatibility:NMS_1_20_R3", configuration: "reobf"))
//    compileOnly(project(path: ":Compatibility:NMS_1_20_R2", configuration: "reobf"))
    SUPPORTED_VERSIONS.each { compileOnly(project(path: ":Compatibility:${it.nmsVersion}", configuration: "reobf")) }

}


build {
    dependsOn(shadowJar, test)
}
javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    if (System.getenv("DEV_BUILD")) {
        destinationDir = file("/home/web/docs/beta/luacore")
    } else {
        destinationDir = file("/home/web/docs/luacore")
    }

}



java {
    withSourcesJar()
    toolchain.languageVersion.set(JavaLanguageVersion.of(21))
}


publishing {
    repositories {
        maven {
            name = "Public"
            if (version.toString().endsWith("SNAPSHOT")) {
                url = "https://repo.selenadevelopment.com/snapshots"
            } else {
                url = "https://repo.selenadevelopment.com/releases"
            }
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            from components.java
            groupId = group
            artifactId = rootProject.name
            version = rootProject.version

        }
    }
}

test {
    useJUnitPlatform()
}



shadowJar {
    dependsOn(jar, ":Compatibility:shadowJar")
    SUPPORTED_VERSIONS.each { dependsOn(":Compatibility:${it.nmsVersion}:reobfJar") }
    if (System.getenv("BUILD_NUMBER") == null) {
        archiveFileName.set(rootProject.name + "-" + rootProject.version + ".jar")
    } else {
        archiveFileName.set(rootProject.name + "-" + rootProject.version + "-b" + System.getenv("BUILD_NUMBER") + ".jar")
    }

    dependencies {
        include(dependency('com.google.code.gson:gson'))
        include(dependency('de.tr7zw:item-nbt-api'))
        include(dependency('com.google.guava:guava'))
        include(dependency('org.luaj:luaj-jse'))
        include(dependency('io.github.classgraph:classgraph'))
        include(dependency('com.iridium:IridiumColorAPI'))
        include(dependency('dev.jorel:commandapi-bukkit-shade'))
        include(dependency('org.apache.commons:commons-lang3:3.13.0'))
        SUPPORTED_VERSIONS.forEach { include(project(":Compatibility:${it.nmsVersion}")) }
        include(project(":Compatibility"))
    }
    def libs = "dev.selena.libs"
    relocate("javax.annotation", libs)
    relocate("org.checkerframework", libs)
    relocate "com.google", libs
    relocate "de.tr7zw.changeme", libs
    relocate "org.luaj", libs
    relocate "io.github", libs
    relocate "com.iridium", libs
    relocate "dev.jorel.commandapi", libs
//
    zip64 true
    subprojects.each { subproject ->
        from subproject.sourceSets.main.output.classesDirs
        from subproject.sourceSets.main.output.resourcesDir
    }
//
//    configurations = [project.configurations.getByName("runtimeClasspath")]
}